#include <stdio.h>

// Function prototype
int recursiveBinarySearch(int arr[], int left, int right, int target);

int main() {
    int arr[] = {2, 4, 6, 8, 10, 12, 14, 16, 18, 20};
    int target = 10;
    int size = sizeof(arr) / sizeof(arr[0]);
    
    int result = recursiveBinarySearch(arr, 0, size - 1, target);
    
    if (result != -1) {
        printf("Element found at index %d\n", result);
    } else {
        printf("Element not found in the array\n");
    }
    
    return 0;
}

// Recursive function to perform binary search
int recursiveBinarySearch(int arr[], int left, int right, int target) {
    if (left <= right) {
        int mid = left + (right - left) / 2;
        
        // Check if the target is present at the mid index
        if (arr[mid] == target) {
            return mid;
        }
        
        // If target is smaller than mid, it can only be present in the left subarray
        if (arr[mid] > target) {
            return recursiveBinarySearch(arr, left, mid - 1, target);
        }
        
        // Otherwise, the target can only be present in the right subarray
        return recursiveBinarySearch(arr, mid + 1, right, target);
    }
    
    // Target is not present in the array
    return -1;
}
