#include <stdio.h>

// Function prototypes
void recursiveBubbleSort(int arr[], int size);
void bubbleSortHelper(int arr[], int n);

int main() {
    int arr[] = {29, 10, 14, 37, 13};
    int size = sizeof(arr) / sizeof(arr[0]);
    
    recursiveBubbleSort(arr, size);
    
    printf("Sorted array: ");
    for (int i = 0; i < size; i++) {
        printf("%d ", arr[i]);
    }
    printf("\n");
    
    return 0;
}

// Recursive function to perform bubble sort
void recursiveBubbleSort(int arr[], int size) {
    // Base case: if size is 1, return
    if (size == 1) {
        return;
    }
    
    // Perform one pass of bubble sort, pushing the largest element to the end
    bubbleSortHelper(arr, size);
    
    // Recursively sort the remaining array
    recursiveBubbleSort(arr, size - 1);
}

// Helper function to perform one pass of bubble sort
void bubbleSortHelper(int arr[], int n) {
    for (int i = 0; i < n - 1; i++) {
        if (arr[i] > arr[i + 1]) {
            // Swap arr[i] and arr[i + 1]
            int temp = arr[i];
            arr[i] = arr[i + 1];
            arr[i + 1] = temp;
        }
    }
}
