#include <stdio.h>
#include <stdlib.h>

// Function to find the subset of an element i
int find(int parent[], int i) {
    if (parent[i] != i)
        parent[i] = find(parent, parent[i]);
    return parent[i];
}

// Function to do union of two subsets
void Union(int parent[], int rank[], int x, int y) {
    int rootX = find(parent, x);
    int rootY = find(parent, y);

    if (rank[rootX] < rank[rootY])
        parent[rootX] = rootY;
    else if (rank[rootX] > rank[rootY])
        parent[rootY] = rootX;
    else {
        parent[rootY] = rootX;
        rank[rootX]++;
    }
}

// Function to compare two edges according to their weights
int compareEdges(const void* a, const void* b) {
    int* edgeA = (int*)a;
    int* edgeB = (int*)b;
    return edgeA[2] - edgeB[2];
}

// Function to implement Kruskal's algorithm
void KruskalMST(int V, int E, int edges[][3]) {
    int result[V][3];  // Array to store the resultant MST
    int parent[V];
    int rank[V];
    int e = 0;  // An index variable for result[]
    int i = 0;  // An index variable for sorted edges

    // Sort all the edges in non-decreasing order of their weight
    qsort(edges, E, sizeof(edges[0]), compareEdges);

    // Allocate memory for creating V subsets
    for (int v = 0; v < V; ++v) {
        parent[v] = v;
        rank[v] = 0;
    }

    // Number of edges to be taken is equal to V-1
    while (e < V - 1 && i < E) {
        // Step 2: Pick the smallest edge. And increment the index for next iteration
        int* nextEdge = edges[i++];

        int x = find(parent, nextEdge[0]);
        int y = find(parent, nextEdge[1]);

        // If including this edge does not cause cycle, include it in result
        // and increment the index of result for next edge
        if (x != y) {
            result[e][0] = nextEdge[0];
            result[e][1] = nextEdge[1];
            result[e][2] = nextEdge[2];
            e++;
            Union(parent, rank, x, y);
        }
    }

    // Print the contents of result[] to display the built MST
    printf("Edges in the MST:\n");
    for (i = 0; i < e; ++i)
        printf("%d -- %d == %d\n", result[i][0], result[i][1], result[i][2]);
}

int main() {
    int V, E;
    printf("Enter the number of vertices: ");
    scanf("%d", &V);
    printf("Enter the number of edges: ");
    scanf("%d", &E);

    int edges[E][3];
    printf("Enter the edges in the format (src dest weight):\n");
    for (int i = 0; i < E; i++) {
        scanf("%d %d %d", &edges[i][0], &edges[i][1], &edges[i][2]);
    }

    KruskalMST(V, E, edges);

    return 0;
}